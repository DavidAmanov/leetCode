// Максим пришёл Тинькофф, чтобы взять кредит на покупку новогодних подарков. Ему предодобрен
// кредите размере т бурлей, значит он может взять любое целое количество бурлей от до т:

// У Максима есть заранее подготовленный список из Я подарков. Ом планирует идти по порядку
// вдоль слиска и каждый раз, когда он видит подарок, на который у него хватает денег, он обязательно
// ` моментально его покупает,

// Помогите ему посчитать какое максимальное количество денег у него может остаться после закупки
// ‘подарков, если он возьмёт кредит оптимального размера (то есть такого, чтобы у него осталось как.
// `можно больше денег после покупки подарков по алгоритму)

// ‘Формат входных данных

// Первая строка содержит два целых числа пи т ( 1< п < 10^5, 1 < т < 10}) — длина списка
// подоркори размер предодобренного кредита

// Вторая строка содержит целых чисел — цены подарков 4; (1 <; < 107).
// ‘Формат выходных данных

// Выоедите одно число — максимальное количество бурлей, которое могло остаться у Максима после
// закупки подарков.

// Замечание

// В первом примере Максим может взять в кредит 3 бурля, и тогда он купит только последний
// ‘подарок. Во втором примере Максим может взять кредит на все 10 бурлей и купить все подарки.

// Примеры данных

// пПример1

// 3 10 
// 5 4 1

// пример2

// 3 10 [1 2 3] 0 1
// 1 2 3

// наша цель найти такой займем при котором остаток будет максимальным, при условии что в списке подарков будет покупаться каждый первый подарок на который 
// хватит денег, значит раз мы выбираем максимальный остаток, то мы выбираем его из чего, следовательно существует массив осатков, по которому можно 
// пройтись и найти нам необходимый, осталось определить этот массив и то что мы считаем оптимальным

//решение со сложностью n^2
let loan = 10
let giftList = 3
let giftsPrice = [5,4,1]
// function howManyGiftsOnOneLoan(loan, giftsPrice, giftList){
//     let variant = []
//     for(let i = 1; i<=loan; i++){
//         variant.push(i)
//     }
//     let max = 0
//     for(let j = 0; j<=variant.length-1; j++){
//         let k = 0;
//         let step = variant[j]
//         let current = step
//         let count = 0 
//         while(k<=giftsPrice.length-1){
//             if(current >= giftsPrice[k]){
//                 current = current - giftsPrice[k]
//                 count +=1
//             } else if (current < giftsPrice[k] && count>0){
//                 if(current>max){
//                     max = current
//                 }
//                 break
//             } 
//             k++
//         }   
//     }
//     return max
// }

//бинарный поиск
function howManyGiftsOnOneLoan(loan, giftsPrice, giftList){
    
    function getMaxBenifit(mid){
        let current = mid //значение текущего кредита
        console.log(mid, 'mid')
        let k = 0
        while(k<=giftsPrice.length-1){
            if(current >= giftsPrice[k]){
                current = current - giftsPrice[k]
            } 
            k++
        }  
        console.log(current, 'cur')
        return current 
    }
    let left = 0 //минимальный размер кредита
    let right = loan //максимальный размер кредита
    let startBenifit = 0 //максимальная выгода 
    while(left<=right){
        let mid = Math.floor((left+right)/2)
        let max = getMaxBenifit(mid);
        if(max>startBenifit){
            startBenifit=max
        } 
        if(max>=0){
            left = mid+1
        } 
        else{
            right = mid -1
        }
    }
    return startBenifit
}

console.log(howManyGiftsOnOneLoan(loan, giftsPrice, giftList))
